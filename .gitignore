def decrypt_monoalphabetic(ciphertext, key_map):
    """
    Decrypts a monoalphabetic cipher using the provided key_map.
    :param ciphertext: Encrypted text (string)
    :param key_map: Dictionary mapping cipher letters to plain letters
    :return: Decrypted text (string)
    """
    plaintext = ''
    for char in ciphertext:
        if char.upper() in key_map:
            decrypted_char = key_map[char.upper()]
            # Preserve original case
            if char.islower():
                decrypted_char = decrypted_char.lower()
            plaintext += decrypted_char
        else:
            plaintext += char  # Non-alphabetic characters remain unchanged
    return plaintext

# Example usage:
# Assume A->M, B->N, ..., Z->L (just an example key)
cipher_key = {
    'A': 'M', 'B': 'N', 'C': 'O', 'D': 'P', 'E': 'Q',
    'F': 'R', 'G': 'S', 'H': 'T', 'I': 'U', 'J': 'V',
    'K': 'W', 'L': 'X', 'M': 'Y', 'N': 'Z', 'O': 'A',
    'P': 'B', 'Q': 'C', 'R': 'D', 'S': 'E', 'T': 'F',
    'U': 'G', 'V': 'H', 'W': 'I', 'X': 'J', 'Y': 'K', 'Z': 'L'
}

encrypted = "ZIT JXOEA WKGVF YGB PXDHL VJGZ"
decrypted = decrypt_monoalphabetic(encrypted, {v: k for k, v in cipher_key.items()})
print("Decrypted Text:", decrypted)
